#!/bin/bash
#######################################################################
# mp3 to m4b conversion script
# Converts a series of mp3 files into an m4b audiobook.
#
# metadata available in the mp3 file(s) is mostly copied into the
# Audiobook. These things can be overridden by commandline arguments.
#
# if cover art is already available in the mp3 file(s) it will be
# extracted and added to the cover art of the audiobook.
# else:
# if an cover art image is available in the same folder it will be
# added to the Audiobook.
#
# By IvoNet.nl
#######################################################################
# Configuration section
#######################################################################
####
# Default transcoding bitrate
BITRATE_DEFAULT="64"

####
# Default transcoding samplerate
SAMPLERATE_DEFAULT="44100"

####
# Default comment
COMMENT="Conversion done by https://hub.docker.com/r/ivonet/mediatools (c) IvoNet.nl"

####
# Default name temporary work directory
TEMP_DIR="${HOME}"

####
# Default target directory to store the end resultAudiobook
TARGET_DIR="/output"

####
# Default source directory to get the mp3 files from
SOURCE_DIR="/input"

####
# Default wrapped mp3 file suffix
GROUPED_MP3_NAME="temp_MP3WRAP.mp3"

####
# Year
YEAR=""

#######################################################################
# Die function
die() {
  echo >&2 "[ERROR] The job ended in error."
  echo "[ERROR] $*"
  exit 1
}

cover() {
  if [ "$(ls -1 *.$1 2>/dev/null | wc -l)" != "0" ]; then
    for f in *.$1; do
      echo "File: $f -> $(echo $f | tr "[:upper:]" "[:lower:]")"
      cp "$f" "${TEMP_DIR}/$(echo $f | tr "[:upper:]" "[:lower:]")"
    done
  fi
}

USAGE=$(
  cat <<EOF
m4b [OPTIONS ...]
-h                This message
-v                Show version
-o VALUE          The Audiobook name without extention (optional).
                  if not provided it is conventionally based on
                  author - group - title
-a VALUE          The Author name (mandatory).
-t VALUE          The Title of the book (mandatory).
-d VALUE/VALUE    Tracknum/total tracks - e.g. 1/2 - (optional).
-g VALUE          The Grouping name.
-G VALUE          Genre (optional).
-c VALUE          The length of a chapter in seconds (optional).
                  Default value is deduce from mp3's
-C VALUE          Comment (optional)
-b VALUE          The bitrate you want to encode with (optional).
                  Default value = 128
-s VALUE          The samplerate you want to use (optional).
                  Default value = 44100
-T VALUE          Chapter text. Only alpha chars. spaces will become dots.
                  (default = Chapter)
-w VALUE          The work directory to use (optional).
                  Default value = ${HOME}
-y VALUE          Year
                  Default value = ""
-z                Zero indexed chapter (default = 1 indexed)
Template:
m4b -G "" -a "" -t ""
m4b -G "" -a "" -g "" -t ""
m4b -G "" -a "" -g "" -t "" -c 600
m4b -w ./tmp -a "" -g "" -G "" -t ""
m4b -G "Urban Fantasy" -a "" -g "" -t ""
m4b -w ./tmp -G "Urban Fantasy" -a "" -g "" -t ""
EOF
)

# Parse command line options.
while getopts hvzo:a:t:b:s:c:g:w:G:C:y:d:T: OPT; do
  case "${OPT}" in
  h)
    echo "${USAGE}"
    exit 0
    ;;
  v)
    echo "$(basename $0) version 2.3"
    exit 0
    ;;
  z)
    CHAPTER_IDX=0
    ;;
  o)
    AUDIOBOOK=${OPTARG}
    ;;
  a)
    AUTHOR=${OPTARG}
    ;;
  c)
    CHAPTER_LENGTH=${OPTARG}
    ;;
  C)
    COMMENT=${OPTARG}
    ;;
  g)
    GROUPING=${OPTARG}
    ;;
  G)
    GENRE=${OPTARG}
    ;;
  t)
    ALBUM=${OPTARG}
    ;;
  b)
    BITRATE=${OPTARG}
    ;;
  s)
    SAMPLERATE=${OPTARG}
    ;;
  w)
    TEMP_DIR=${OPTARG}
    ;;
  y)
    YEAR=${OPTARG}
    ;;
  d)
    TRACK=${OPTARG}
    ;;
  T)
    CHAPTER_TEXT=${OPTARG}
    ;;
  \?)
    # getopts issues an error message
    die "You should...\n${USAGE}"
    ;;
  esac
done

# Remove the options we parsed above.
shift $(expr ${OPTIND} - 1)

#Non optionals
if [ -z "${AUTHOR}" ]; then
  die "The -a option is mandatory.\n${USAGE}"
fi
if [ -z "${ALBUM}" ]; then
  die "The -t option is mandatory.\n${USAGE}"
fi

# Convention over configuration
if [ -z "${AUDIOBOOK}" ]; then
  if [ -z "${GROUPING}" ]; then
    AUDIOBOOK="${AUTHOR} - ${ALBUM}"
  else
    AUDIOBOOK="${AUTHOR} - ${GROUPING} - ${ALBUM}"
  fi
  AUDIOBOOK=${AUDIOBOOK//#/}
  TITLE=${AUDIOBOOK}
  echo "Filename based on convention:"
  echo "${AUDIOBOOK}"
fi

mp3fl="$(find *.mp3 | head -n 1)"

#TODO replace with ffprobe means one less dependency
if [ -z "${SAMPLERATE}" ]; then
  SAMPLERATE="$(mp3info -p '%Q' "$mp3fl")"
fi
if [ "${SAMPLERATE}" == "16000" ]; then
  # 16000 is not supported by the current ffmpeg aac codec
  SAMPLERATE="24000"
fi
if [ -z "${SAMPLERATE}" ]; then
  SAMPLERATE=${SAMPLERATE_DEFAULT}
fi
echo "SAMPLERATE=${SAMPLERATE}"

if [ -z "${BITRATE}" ]; then
  BITRATE="$(mp3info -r m -p '%r' "$mp3fl")"
fi
if [ -z "${BITRATE}" ]; then
  BITRATE=${BITRATE_DEFAULT}
fi
if [ "${BITRATE}" = "320" ]; then
  BITRATE=${BITRATE}_DEFAULT
fi
echo "BITRATE=${BITRATE}"
if [ -z "${TRACK}" ]; then
  TRACK="1/1"
else
  TRACKNAME=".Part ${TRACK//\/[0-9]/}"
  AUDIOBOOK=${AUDIOBOOK}${TRACKNAME}
fi
echo "TRACK=${TRACK}"
if [ -z "${CHAPTER_IDX}" ]; then
  CHAPTER_IDX=1
fi
if [ -z "${CHAPTER_TEXT}" ]; then
  CHAPTER_TEXT="Chapter"
else
  CHAPTER_TEXT=${CHAPTER_TEXT// /.}
fi

case "${TARGET_DIR}" in
*)
  TARGET_DIR="${TARGET_DIR}/"
  ;;
esac

if [ ! -d "${TEMP_DIR}" ]; then
  mkdir -p "${TEMP_DIR}"
fi

echo "AUTHOR=${AUTHOR}"
echo "GROUPING=${GROUPING}"
echo "ALBUM Title=${ALBUM}"
echo "WORK DIR=${TEMP_DIR}"
echo "Creating: ${AUDIOBOOK}"
if [ -n "${CHAPTER_LENGTH}" ]; then
  echo "Using fixed length chapters..."
  echo "CHAPTER_LENGTH=${CHAPTER_LENGTH}"
fi

cd "${SOURCE_DIR}" || exit

if [ "$(find *.jpg 2>/dev/null | wc -l)" == "0" ]; then
  eyeD3 --write-images="${TARGET_DIR}" "$(find *.mp3 | head -n 1)"
  RETVAL=$?
  [ ${RETVAL} -eq 0 ] || echo "The eyeD3 command failed with exit code: ${RETVAL}"
fi
cover jpg
cover JPG
cover png
cover PNG
cover jpeg
cover JPEG

cd "${TEMP_DIR}" || exit
mv "*.jpeg" "*.jpg" &>/dev/null
mogrify -format jpg *.png &>/dev/null

if [ "$(ls -1 *.jpg 2>/dev/null | wc -l)" == "0" ]; then
  die "Could not find or extract a cover image"
fi

cd "${SOURCE_DIR}" || exit

if [ -z "${CHAPTER_LENGTH}" ]; then
  if [ $(find *.mp3 2>/dev/null | wc -l) -eq 0 ]; then
    die "No mp3 files found in this folder"
  fi
  i=${CHAPTER_IDX}
  total_seconds=0
  total_millis=0
  echo "00:00:00.000 ${CHAPTER_TEXT} $i" >"${TEMP_DIR}/${AUDIOBOOK}.chapters.txt"
  echo "00:00:00.000 ${CHAPTER_TEXT} $i"
  for mp3 in *.mp3; do
    duration=$(ffprobe -v quiet -print_format json -show_format "${mp3}" | jq ".format.duration" | sed 's/"//g')
    RETVAL=$?
    [ ${RETVAL} -eq 0 ] || die "The ffprobe command failed with exit code: ${RETVAL}"

    millis="$(echo ${duration} | awk -F'.' '{print $2}')"
    millis="${millis#"${millis%%[!0]*}"}"

    total_millis=$((total_millis + millis))
    secs=$((total_millis / 1000000))
    total_millis=$((total_millis - (secs * 1000000)))
    total_seconds=$((total_seconds + $(echo ${duration} | awk -F'.' '{print $1}') + secs))

    hours=$((total_seconds / (60 * 60)))
    minutes=$(((total_seconds - (hours * 60 * 60)) / 60))
    seconds=$((total_seconds - (hours * 60 * 60) - (minutes * 60)))

    ((i++))
    printf "%02d:%02d:%02d.%03d ${CHAPTER_TEXT} %d\n" "${hours}" "${minutes}" "${seconds}" "${millis:0:3}" $i >>"${TEMP_DIR}/${AUDIOBOOK}.chapters.txt"
    printf "%02d:%02d:%02d.%03d ${CHAPTER_TEXT} %d\n" "${hours}" "${minutes}" "${seconds}" "${millis:0:3}" $i
  done
  cp "${TEMP_DIR}/${AUDIOBOOK}.chapters.txt" "${TARGET_DIR}"
fi

echo "Assembling the audiofiles..."
dmp=$(ffmpeg -i "concat:$(find *.mp3 | tr '\n' '|' | sed 's/|$//g')" -v quiet -acodec copy "${TEMP_DIR}/${GROUPED_MP3_NAME}")
if [ $? -ne 0 ]; then
  echo "The default mp3 merge failed. Using the fallback method..."
  rm -rf "$TEMP_DIR/$GROUPED_MP3_NAME"
  find *.mp3 -exec cat "{}" \; >>"$TEMP_DIR/$GROUPED_MP3_NAME"
fi

cd "${TEMP_DIR}" || exit

echo "Convert the audio. This can take a while..."
ffmpeg -i "${GROUPED_MP3_NAME}" -v quiet -stats -threads 4 -vn -y -acodec aac -strict -2 -map_metadata 0 -map_metadata:s:a 0:s:a -ab "${BITRATE}"k -ar "${SAMPLERATE}" -ac 1 "${AUDIOBOOK}.m4a"
RETVAL=$?
[ ${RETVAL} -eq 0 ] || die "The ffmpeg command failed with exit code: ${RETVAL}"

# AtomicParsley conversion to m4b
AtomicParsley "${AUDIOBOOK}.m4a" --title "${TITLE}" --grouping "${GROUPING}" --sortOrder album "${GROUPING}" --album "${ALBUM}" --artist "${AUTHOR}" --genre "${GENRE}" --tracknum "${TRACK}" --disk "${TRACK}" --comment "${COMMENT}" --year "${YEAR}" --stik Audiobook --overWrite
RETVAL=$?
[ ${RETVAL} -eq 0 ] || die "The AtomicParsley command failed with exit code: ${RETVAL}"

echo "Adding chapters to the audiobook..."
if [ -f "${TEMP_DIR}/${AUDIOBOOK}.chapters.txt" ]; then
  mp4chaps -i "${AUDIOBOOK}.m4b"
  RETVAL=$?
else
  mp4chaps -e "${CHAPTER_LENGTH}" "${AUDIOBOOK}.m4b"
  RETVAL=$?
fi
[ ${RETVAL} -eq 0 ] || die "The mp4chaps command failed with exit code: ${RETVAL}"

echo "Adding cover art to audiobook..."
mp4art --add "$(find . -name '*.jpg' | head -n 1)" "${AUDIOBOOK}.m4b"
RETVAL=$?
[ ${RETVAL} -eq 0 ] || die "The mp4art command failed with exit code: ${RETVAL}"

cp -vf "${AUDIOBOOK}.m4b" "${TARGET_DIR}"
