#!/bin/bash
#######################################################################
# mp3 to m4b conversion script
# Converts a series of mp3 files into an m4b audiobook.
#
# metadata available in the mp3 file(s) is mostly copied into the
# Audiobook. These things can be overridden by commandline arguments.
#
# if cover art is already available in the mp3 file(s) it will be
# extracted and added to the cover art of the audiobook.
# else:
# if an cover art image is available in the same folder it will be added
# to the Audiobook.
#
# By IvoNet.nl
#######################################################################
# Configuration section
#######################################################################
####
# Default transcoding bitrate
BITRATE_DEFAULT="64"

####
# Default transcoding samplerate
SAMPLERATE_DEFAULT="44100"

####
# Default chapter lengths in seconds
CHAPTER_LENGTH="600"

####
# Default comment
COMMENT="Conversion done by https://hub.docker.com/r/ivonet/mediatools (c) IvoNet.nl"

####
# Default name temporary work directory
TEMP_DIR="${HOME}/"

####
# Default target directory to store the end resultAudiobook
TARGET_DIR="/output"

####
# Default source directory to get the mp3 files from
SOURCE_DIR="/input"

####
# Default wrapped mp3 file suffix
GROUPED_MP3_NAME="temp_MP3WRAP.mp3"

####
# Year
YEAR=""

#######################################################################
# Application section - DO NOT EDIT
#######################################################################
# Die function
die () {
    echo >&2 "[ERROR] The job ended in error."
    echo "[ERROR] $@"
    exit 1
}

check1=`which ffmpeg`
if [ "$check1" = "" ]
then
    die "ffmpeg is missing -> e.g.: brew install ffmpeg"
fi
check3=`which AtomicParsley`
if [ "$check3" = "" ]
then
    die "AtomicParsley is missing -> e.g.: brew install atomicparsley"
fi
check4=`which mp4chaps`
if [ "$check4" = "" ]
then
    die "mp4chaps is missing -> e.g.: brew install mp4v2"
fi
check5=`which mp4art`
if [ "$check5" = "" ]
then
    die "mp4art is missing -> e.g.: brew install mp4v2"
fi
check6=`which eyeD3`
if [ "$check6" = "" ]
then
    die "eyeD3 is missing -> e.g.: brew install eyeD3"
fi
check7=`which mp3info`
if [ "$check7" = "" ]
then
    die "mp3info is missing -> e.g.: brew install mp3info"
fi

USAGE=$(
cat <<EOF
m4b [OPTIONS ...]
-h                This message
-v                Show version
-o VALUE          The Audiobook name without extention (optional).
                  if not provided it is conventionally based on
                  author - group - title
-a VALUE          The Author name (mandatory).
-t VALUE          The Title of the book (mandatory).
-d VALUE/VALUE    Tracknum/total tracks - e.g. 1/2 - (optional).
-g VALUE          The Grouping name (mandatory).
-G VALUE          Genre (optional).
-c VALUE          The length of a chapter in seconds (optional).
                  Default value = 180
-C VALUE          Comment (optional)
-b VALUE          The bitrate you want to encode with (optional).
                  Default value = 128
-s VALUE          The samplerate you want to use (optional).
                  Default value = 44100
-w VALUE          The work directory to use (optional).
                  Default value = ${HOME}
-y VALUE          Year
                  Default value = ""
Template:
m4b -G "" -a "" -g "" -t ""
m4b -w ./tmp -a "" -g "" -G "" -t ""
m4b -G "Urban Fantasy" -a "" -g "" -t ""
m4b -w ./tmp -G "Urban Fantasy" -a "" -g "" -t ""
EOF
)

# Parse command line options.
while getopts hvo:a:t:b:s:c:g:w:G:C:y:d: OPT; do
    case "$OPT" in
        h)
            echo "$USAGE"
            exit 0
            ;;
        v)
            echo "`basename $0` version 2.1"
            exit 0
            ;;
        o)
            AUDIOBOOK=$OPTARG
            ;;
        a)
            AUTHOR=$OPTARG
            ;;
        c)
            CHAPTER_LENGTH=$OPTARG
            ;;
        C)
            COMMENT=$OPTARG
            ;;
        g)
            GROUPING=$OPTARG
            ;;
        G)
            GENRE=$OPTARG
            ;;
        t)
            ALBUM=$OPTARG
            ;;
        b)
            BITRATE=$OPTARG
            ;;
        s)
            SAMPLERATE=$OPTARG
            ;;
        w)
           TEMP_DIR=$OPTARG
           ;;
        y)
           YEAR=$OPTARG
           ;;
        d)
           TRACK=$OPTARG
           ;;
        \?)
            # getopts issues an error message
            die "You should...\n$USAGE"
            ;;
    esac
done


# Remove the options we parsed above.
shift `expr $OPTIND - 1`

#Non optionals
if [ "$AUTHOR" = "" ]
then
    die "The -a option is mandatory.\n$USAGE"
fi
if [ "GROUPING" = "" ]
then
    die "The -g option is mandatory.\n$USAGE"
fi
if [ "ALBUM" = "" ]
then
    die "The -t option is mandatory.\n$USAGE"
fi

#Convention over configuration
if [ "$AUDIOBOOK" = "" ]
then
	AUDIOBOOK="$AUTHOR - $GROUPING - $ALBUM"
	AUDIOBOOK=${AUDIOBOOK//#/}
	TITLE=$AUDIOBOOK
	echo "Filename based on convention:\n$AUDIOBOOK"
fi

mp3fl="`find . -name '*.mp3' | head -n 1`"

if [ "$SAMPLERATE" = "" ]
then
    SAMPLERATE="`mp3info -p '%Q' \"$mp3fl\"`"
fi
if [ "$SAMPLERATE" = "16000" ]
then
    # 16000 is not supported by the current ffmpeg aac codec
    SAMPLERATE="24000"
fi
if [ "$SAMPLERATE" = "" ]
then
    SAMPLERATE=$SAMPLERATE_DEFAULT
fi
echo "SAMPLERATE=$SAMPLERATE"

if [ "$BITRATE" = "" ]
then
    BITRATE="`mp3info -r m -p '%r' \"$mp3fl\"`"
fi
if [ "$BITRATE" = "" ]
then
    BITRATE=$BITRATE_DEFAULT
fi
if [ "$BITRATE" = "320" ]
then
    BITRATE=$BITRATE_DEFAULT
fi
echo "BITRATE=$BITRATE"
if [ "$TRACK" = "" ]
then
    TRACK="1/1"
else
    TRACKNAME=".Part ${TRACK//\/[0-9]/}"
    AUDIOBOOK=$AUDIOBOOK$TRACKNAME
fi
echo "TRACK=$TRACK"

## Make sure the folders end with a slash
#case "$TEMP_DIR" in
#*)
#    TEMP_DIR="$TEMP_DIR/"
#    ;;
#esac
case "$TARGET_DIR" in
*)
    TARGET_DIR="$TARGET_DIR/"
    ;;
esac

# create tmp dir if not exists
if [ ! -d "$TEMP_DIR" ]
then
   mkdir "$TEMP_DIR"
fi

echo "AUTHOR=$AUTHOR"
echo "CHAPTER_LENGTH=$CHAPTER_LENGTH"
echo "GROUPING=$GROUPING"
echo "ALBUM Title=$ALBUM"
echo "WORK DIR=$TEMP_DIR"
echo "Creating: $AUDIOBOOK"

cd "${SOURCE_DIR}"

if [ "$(ls -1 *.jpg 2>/dev/null|wc -l)" == "0" ]; then
   eyeD3 --write-images="${TARGET_DIR}" "`find . -name '*.mp3' | head -n 1`"
   RETVAL=$?
   [ $RETVAL -eq 0 ] || echo "The eyeD3 command failed with exit code: $RETVAL"
fi

if [ "$(ls -1 *.jpg 2>/dev/null|wc -l)" != "0" ]
then
    for f in *.jpg; do
      echo "File -> $f"
      cp "$f" "${TEMP_DIR}/$f.tmp"
      cd "${TEMP_DIR}"
      mv "$f.tmp" "`echo $f | tr "[:upper:]" "[:lower:]"`"
      cd - &>/dev/null
    done
fi

if [ "$(ls -1 *.JPG 2>/dev/null|wc -l)" != "0" ]
then
    for f in *.JPG; do
      echo "File -> $f"
      cp "$f" "${TEMP_DIR}/$f.tmp"
      cd "${TEMP_DIR}"
      mv "$f.tmp" "`echo $f | tr "[:upper:]" "[:lower:]"`"
      cd - &>/dev/null
    done
fi

if [ "$(ls -1 *.jpeg 2>/dev/null|wc -l)" != "0" ]
then
    for f in *.jpeg; do
      echo "File -> $f"
      cp "$f" "${TEMP_DIR}/$f.tmp"
      cd "${TEMP_DIR}"
      mv "$f.tmp" "`echo $f | tr "[:upper:]" "[:lower:]"`"
      cd - &>/dev/null
    done
fi

if [ "$(ls -1 *.JPEG 2>/dev/null|wc -l)" != "0" ]
then
    for f in *.JPEG; do
      echo "File -> $f"
      cp "$f" "${TEMP_DIR}/$f.tmp"
      cd "${TEMP_DIR}"
      mv "$f.tmp" "`echo $f | tr "[:upper:]" "[:lower:]"`"
      cd - &>/dev/null
    done
fi

if [ "$(ls -1 *.png 2>/dev/null|wc -l)" != "0" ]
then
    for f in *.png; do
      echo "File -> $f"
      cp "$f" "${TEMP_DIR}/$f.tmp"
      cd "${TEMP_DIR}"
      mv "$f.tmp" "`echo $f | tr "[:upper:]" "[:lower:]"`"
      cd - &>/dev/null
    done
fi

if [ "$(ls -1 *.PNG 2>/dev/null|wc -l)" != "0" ]
then
    for f in *.PNG; do
      echo "File -> $f"
      cp "$f" "${TEMP_DIR}/$f.tmp"
      cd "${TEMP_DIR}"
      mv "$f.tmp" "`echo $f | tr "[:upper:]" "[:lower:]"`"
      cd - &>/dev/null
    done
fi

cd "${TEMP_DIR}"
mv "*.jpeg" "*.jpg" &>/dev/null
mogrify -format jpg *.png &>/dev/null

if [ "$(ls -1 *.jpg 2>/dev/null|wc -l)" == "0" ]; then
   die "Could not find or extract a cover image"
fi

cd "${SOURCE_DIR}"

find *.mp3 -exec cat "{}" >>"$TEMP_DIR/$GROUPED_MP3_NAME" \;

cd "${TEMP_DIR}"

ffmpeg -i "$GROUPED_MP3_NAME" -threads 4 -vn -y -acodec aac -strict -2 -map_metadata 0 -map_metadata:s:a 0:s:a -ab "$BITRATE"k -ar "$SAMPLERATE" -ac 1 "$AUDIOBOOK.m4a"
RETVAL=$?
[ $RETVAL -eq 0 ] || die "The ffmpeg command failed with exit code: $RETVAL"

# AtomicParsley conversion to m4b
set -x
AtomicParsley "$AUDIOBOOK.m4a" --title "$TITLE" --grouping "$GROUPING" --sortOrder album "$GROUPING" --album "$ALBUM" --artist "$AUTHOR" --genre "$GENRE" --tracknum "$TRACK" --disk "$TRACK" --comment "$COMMENT" --year "$YEAR" --stik Audiobook --overWrite
RETVAL=$?
[ $RETVAL -eq 0 ] || die "The AtomicParsley command failed with exit code: $RETVAL"
set +x

# adding chapters to the audiobook
mp4chaps -e "$CHAPTER_LENGTH" "$AUDIOBOOK.m4b"
RETVAL=$?
[ $RETVAL -eq 0 ] || die "The mp4chaps command failed with exit code: $RETVAL"

# adding cover art to audiobook
mp4art --add "`find . -name '*.jpg' | head -n 1`" "$AUDIOBOOK.m4b"
RETVAL=$?
[ $RETVAL -eq 0 ] || die "The mp4art command failed with exit code: $RETVAL"

#mp4box -splits 327680

cp -v "$AUDIOBOOK.m4b" "$TARGET_DIR"
