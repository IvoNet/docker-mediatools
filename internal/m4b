#!/bin/bash
#######################################################################
# mp3 to m4b conversion script
# Converts a series of mp3 files into an m4b audiobook.
#
# metadata available in the mp3 file(s) is mostly copied into the
# Audiobook. These things can be overridden by commandline arguments.
#
# if cover art is already available in the mp3 file(s) it will be
# extracted and added to the cover art of the audiobook.
# else:
# if an cover art image is available in the same folder it will be added
# to the Audiobook.
#
# By IvoNet.nl
#######################################################################
# Configuration section
#######################################################################
####
# Default transcoding bitrate
BITRATE_DEFAULT="64"

####
# Default transcoding samplerate
SAMPLERATE_DEFAULT="44100"

####
# Default comment
COMMENT="Conversion done by https://hub.docker.com/r/ivonet/mediatools (c) IvoNet.nl"

####
# Default name temporary work directory
TEMP_DIR="${HOME}"

####
# Default target directory to store the end resultAudiobook
TARGET_DIR="/output"

####
# Default source directory to get the mp3 files from
SOURCE_DIR="/input"

####
# Default wrapped mp3 file suffix
GROUPED_MP3_NAME="temp_MP3WRAP.mp3"

####
# Year
YEAR=""

#######################################################################
# Application section - DO NOT EDIT
#######################################################################
# Die function
die() {
  echo >&2 "[ERROR] The job ended in error."
  echo "[ERROR] $@"
  exit 1
}

cover() {
  if [ "$(ls -1 *.$1 2>/dev/null | wc -l)" != "0" ]; then
    for f in *.$1; do
      echo "File: $f -> $(echo $f | tr "[:upper:]" "[:lower:]")"
      cp "$f" "${TEMP_DIR}/$(echo $f | tr "[:upper:]" "[:lower:]")"
    done
  fi
}

check1=$(which ffmpeg)
if [ "$check1" = "" ]; then
  die "ffmpeg is missing -> e.g.: brew install ffmpeg"
fi
check3=$(which AtomicParsley)
if [ "$check3" = "" ]; then
  die "AtomicParsley is missing -> e.g.: brew install atomicparsley"
fi
check4=$(which mp4chaps)
if [ "$check4" = "" ]; then
  die "mp4chaps is missing -> e.g.: brew install mp4v2"
fi
check5=$(which mp4art)
if [ "$check5" = "" ]; then
  die "mp4art is missing -> e.g.: brew install mp4v2"
fi
check6=$(which eyeD3)
if [ "$check6" = "" ]; then
  die "eyeD3 is missing -> e.g.: brew install eyeD3"
fi
check7=$(which mp3info)
if [ "$check7" = "" ]; then
  die "mp3info is missing -> e.g.: brew install mp3info"
fi

USAGE=$(
  cat <<EOF
m4b [OPTIONS ...]
-h                This message
-v                Show version
-o VALUE          The Audiobook name without extention (optional).
                  if not provided it is conventionally based on
                  author - group - title
-a VALUE          The Author name (mandatory).
-t VALUE          The Title of the book (mandatory).
-d VALUE/VALUE    Tracknum/total tracks - e.g. 1/2 - (optional).
-g VALUE          The Grouping name (mandatory).
-G VALUE          Genre (optional).
-c VALUE          The length of a chapter in seconds (optional).
                  Default value is deduce from mp3's
-C VALUE          Comment (optional)
-b VALUE          The bitrate you want to encode with (optional).
                  Default value = 128
-s VALUE          The samplerate you want to use (optional).
                  Default value = 44100
-w VALUE          The work directory to use (optional).
                  Default value = ${HOME}
-y VALUE          Year
                  Default value = ""
Template:
m4b -G "" -a "" -g "" -t ""
m4b -w ./tmp -a "" -g "" -G "" -t ""
m4b -G "Urban Fantasy" -a "" -g "" -t ""
m4b -w ./tmp -G "Urban Fantasy" -a "" -g "" -t ""
EOF
)

# Parse command line options.
while getopts hvo:a:t:b:s:c:g:w:G:C:y:d: OPT; do
  case "$OPT" in
  h)
    echo "$USAGE"
    exit 0
    ;;
  v)
    echo "$(basename $0) version 2.3"
    exit 0
    ;;
  o)
    AUDIOBOOK=$OPTARG
    ;;
  a)
    AUTHOR=$OPTARG
    ;;
  c)
    CHAPTER_LENGTH=$OPTARG
    ;;
  C)
    COMMENT=$OPTARG
    ;;
  g)
    GROUPING=$OPTARG
    ;;
  G)
    GENRE=$OPTARG
    ;;
  t)
    ALBUM=$OPTARG
    ;;
  b)
    BITRATE=$OPTARG
    ;;
  s)
    SAMPLERATE=$OPTARG
    ;;
  w)
    TEMP_DIR=$OPTARG
    ;;
  y)
    YEAR=$OPTARG
    ;;
  d)
    TRACK=$OPTARG
    ;;
  \?)
    # getopts issues an error message
    die "You should...\n$USAGE"
    ;;
  esac
done

# Remove the options we parsed above.
shift $(expr $OPTIND - 1)

#Non optionals
if [ "$AUTHOR" = "" ]; then
  die "The -a option is mandatory.\n$USAGE"
fi
if [ "GROUPING" = "" ]; then
  die "The -g option is mandatory.\n$USAGE"
fi
if [ "ALBUM" = "" ]; then
  die "The -t option is mandatory.\n$USAGE"
fi

#Convention over configuration
if [ "$AUDIOBOOK" = "" ]; then
  AUDIOBOOK="$AUTHOR - $GROUPING - $ALBUM"
  AUDIOBOOK=${AUDIOBOOK//#/}
  TITLE=$AUDIOBOOK
  echo "Filename based on convention:"
  echo "$AUDIOBOOK"
fi

mp3fl="$(find *.mp3 | head -n 1)"

if [ "$SAMPLERATE" = "" ]; then
  SAMPLERATE="$(mp3info -p '%Q' "$mp3fl")"
fi
if [ "$SAMPLERATE" = "16000" ]; then
  # 16000 is not supported by the current ffmpeg aac codec
  SAMPLERATE="24000"
fi
if [ "$SAMPLERATE" = "" ]; then
  SAMPLERATE=$SAMPLERATE_DEFAULT
fi
echo "SAMPLERATE=$SAMPLERATE"

if [ "$BITRATE" = "" ]; then
  BITRATE="$(mp3info -r m -p '%r' "$mp3fl")"
fi
if [ "$BITRATE" = "" ]; then
  BITRATE=$BITRATE_DEFAULT
fi
if [ "$BITRATE" = "320" ]; then
  BITRATE=$BITRATE_DEFAULT
fi
echo "BITRATE=$BITRATE"
if [ "$TRACK" = "" ]; then
  TRACK="1/1"
else
  TRACKNAME=".Part ${TRACK//\/[0-9]/}"
  AUDIOBOOK=$AUDIOBOOK$TRACKNAME
fi
echo "TRACK=$TRACK"

## Make sure the folders end with a slash
#case "$TEMP_DIR" in
#*)
#    TEMP_DIR="$TEMP_DIR/"
#    ;;
#esac
case "${TARGET_DIR}" in
*)
  {TARGET_DIR}="${TARGET_DIR}/"
  ;;
esac

# create tmp dir if not exists
if [ ! -d "$TEMP_DIR" ]; then
  mkdir "$TEMP_DIR"
fi

echo "AUTHOR=$AUTHOR"
if [ -n "$CHAPTER_LENGTH" ]; then
  echo "Using fixed length chapters..."
  echo "CHAPTER_LENGTH=$CHAPTER_LENGTH"
fi
echo "GROUPING=$GROUPING"
echo "ALBUM Title=$ALBUM"
echo "WORK DIR=$TEMP_DIR"
echo "Creating: $AUDIOBOOK"

cd "${SOURCE_DIR}" || exit

if [ "$(find *.jpg 2>/dev/null | wc -l)" == "0" ]; then
  eyeD3 --write-images="${TARGET_DIR}" "$(find *.mp3 | head -n 1)"
  RETVAL=$?
  [ $RETVAL -eq 0 ] || echo "The eyeD3 command failed with exit code: $RETVAL"
fi


cover jpg
cover JPG
cover png
cover PNG
cover jpeg
cover JPEG

cd "${TEMP_DIR}" || exit
mv "*.jpeg" "*.jpg" &>/dev/null
mogrify -format jpg *.png &>/dev/null

if [ "$(ls -1 *.jpg 2>/dev/null | wc -l)" == "0" ]; then
  die "Could not find or extract a cover image"
fi

cd "${SOURCE_DIR}" || exit

echo "Assembling chapter information..."
echo "00:00:00.000 Chapter 1" >"$TEMP_DIR/$AUDIOBOOK.chapters.txt"
if [ -z "$CHAPTER_LENGTH" ]; then
  if [ $(ls -1 *.mp3 2>/dev/null | wc -l) -eq 0 ]; then
    die "No mp3 files found in this folder"
  fi
  i=2
  total_seconds=0
  total_millis=0
  for mp3 in *.mp3; do
    duration=$(ffprobe -v quiet -print_format json -show_format "${mp3}" | jq ".format.duration"|sed 's/"//g')
    millisecs="$(echo $duration | awk -F'.' '{print $2}')"
    millisecs="${millisecs#"${millisecs%%[!0]*}"}"
    total_millis=$((total_millis + millisecs))
    secs=$((total_millis / 1000000))
    total_millis=$((total_millis - (secs * 1000000)))
    total_seconds=$((total_seconds + $(echo $duration | awk -F'.' '{print $1}') + secs))
    hour=$((total_seconds / (60 * 60)))
    minutes=$(((total_seconds - (hour * 60 * 60)) / 60))
    seconds=$((total_seconds - (hour * 60 * 60) - (minutes * 60)))
    hour=$(printf "%02d" $hour)
    minutes=$(printf "%02d" $minutes)
    seconds=$(printf "%02d" $seconds)
    echo "$hour:$minutes:$seconds.${millisecs:0:3} Chapter $i" >>"$TEMP_DIR/$AUDIOBOOK.chapters.txt"
    echo "$hour:$minutes:$seconds.${millisecs:0:3} Chapter $i"
    i=$((i + 1))
  done
  cp "$TEMP_DIR/$AUDIOBOOK.chapters.txt" "${TARGET_DIR}"
fi

echo "Assembling the audiofiles..."
ffmpeg -i "concat:$(find *.mp3 | tr '\n' '|' | sed 's/|$//g')" -v quiet -acodec copy "$TEMP_DIR/$GROUPED_MP3_NAME"

cd "${TEMP_DIR}" || exit

ffmpeg -i "$GROUPED_MP3_NAME" -threads 4 -vn -y -acodec aac -strict -2 -map_metadata 0 -map_metadata:s:a 0:s:a -ab "$BITRATE"k -ar "$SAMPLERATE" -ac 1 "$AUDIOBOOK.m4a"
RETVAL=$?
[ $RETVAL -eq 0 ] || die "The ffmpeg command failed with exit code: $RETVAL"

# AtomicParsley conversion to m4b
AtomicParsley "$AUDIOBOOK.m4a" --title "$TITLE" --grouping "$GROUPING" --sortOrder album "$GROUPING" --album "$ALBUM" --artist "$AUTHOR" --genre "$GENRE" --tracknum "$TRACK" --disk "$TRACK" --comment "$COMMENT" --year "$YEAR" --stik Audiobook --overWrite
RETVAL=$?
[ $RETVAL -eq 0 ] || die "The AtomicParsley command failed with exit code: $RETVAL"

# adding chapters to the audiobook
if [ -f "$TEMP_DIR/${AUDIOBOOK}.chapters.txt" ]; then
  mp4chaps -i "$AUDIOBOOK.m4b"
else
  mp4chaps -e "$CHAPTER_LENGTH" "$AUDIOBOOK.m4b"
fi
RETVAL=$?
[ $RETVAL -eq 0 ] || die "The mp4chaps command failed with exit code: $RETVAL"

# adding cover art to audiobook
mp4art --add "$(find . -name '*.jpg' | head -n 1)" "$AUDIOBOOK.m4b"
RETVAL=$?
[ $RETVAL -eq 0 ] || die "The mp4art command failed with exit code: $RETVAL"

#mp4box -splits 327680

cp -v "${AUDIOBOOK}.m4b" "${TARGET_DIR}"
